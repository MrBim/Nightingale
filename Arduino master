//libraries
#include <Wire.h>
#include <math.h>
#include "encoder.h"
#include "Adafruit_LEDBackpack.h"
#include "Adafruit_GFX.h"
#include "Adafruit_Trellis.h"

/* sets a variable between 0 -15 using up down as well as shift button
  it displays this using 4 leds.
  0-3   led solid
  4-7   led flashes
  8-11 reverse of 0-4
  12-15 reverse flashing
*/
// ----------------------------------define input pins for up down and shift buttons
const int pushButtonUp = 10;
const int pushButtonDwn = 9;
const int pushButtonShift = 22;

// ----------------------------button press comparison variables. used to output button state change rather than repeated instances of button state.
int lastUpButtonState = 0;
int lastDwnButtonState = 0;
int lastShiftButtonState = 0;

// ------------------------------------------main variable for controling stuff
int varState = 0; // set by up/down buttons
int useState = 0; // main variable for controlling user interface
int shiftVar = 0; // 0 or 1 for shift button

// ----------------------------------------------timing bits for LED flashing
const long flashRate = 200;      // length between led state change
unsigned long lastFlashFour = 0; //last time Led changed state
unsigned long lastFlashFive = 0;
unsigned long lastFlashSix = 0;
unsigned long lastFlashSeven = 0;

int flashStateFour = HIGH;
int flashStateFive = HIGH;       // initalises led state on start up
int flashStateSix = HIGH;
int flashStateSeven = HIGH;

//addressing the alphanumic stuff
Adafruit_AlphaNum4 alpha4a = Adafruit_AlphaNum4();
Adafruit_AlphaNum4 alpha4b = Adafruit_AlphaNum4();
Adafruit_AlphaNum4 alpha4c = Adafruit_AlphaNum4();

// set variables to be controled by encoders
//2x 64 part arrays 1 for dials and one for trellis buttons.
int buttVar[64];
int dialVar[32] = 
{16383, 16383, 15, 0, 
16383, 0, 1, 16383,
0,0,0,0,
0,0,0,0,
0,0,0,0,
0,0,0,0,
0,0,0,0,
0,0,0,0,
};

int saveLoc = 0;
int presetMode = 0;
int splitValOne = 0;
int splitValTwo = 0;
int firstVal = 0;
int secondVal = 0;
int totalVal = 0;
int addressCounter = 0;
int saveBank = 0;

int trellisMod = 0;
int buttVal = 0;

int dialA = (varState * 4 + 0);
int dialB = (varState * 4 + 1);
int dialC = (varState * 4 + 2);
int dialD = (varState * 4 + 3);

unsigned long thisTurn = 0;
unsigned long lastTurn = 0;
double smooMul = 1;

//------------------------------------------------trelis stuff
#define LATCHING 1
// set the mode here
#define MODE LATCHING

Adafruit_Trellis matrix0 = Adafruit_Trellis();
Adafruit_Trellis matrix1 = Adafruit_Trellis();

Adafruit_TrellisSet trellis =  Adafruit_TrellisSet(&matrix0, &matrix1);
#define NUMTRELLIS 2

#define numKeys (NUMTRELLIS * 16)

#define INTPIN A2

void alphaDisplay(int dialPos);
//void trellisDisplay();

void setup() // ------------------------------------------------------------------------------------------------ void setup starts
{
  Serial.begin(9600);
  Serial3.begin(31250);

  // ------------------------------set pins for buttons and LED's
  pinMode(pushButtonUp, INPUT);
  pinMode(pushButtonDwn, INPUT);
  pinMode(pushButtonShift, INPUT);
  pinMode(31, OUTPUT);
  pinMode(33, OUTPUT);
  pinMode(35, OUTPUT);
  pinMode(37, OUTPUT);

  //Alphanumic bits
  alpha4a.begin(0x72);
  alpha4b.begin(0x73);  // pass in the address
  alpha4c.begin(0x74);
  //--------------------------------trellis bits
  pinMode(INTPIN, INPUT);
  digitalWrite(INTPIN, HIGH);
  trellis.begin(0x70, 0x71);

  // light up all the LEDs in order
  for (uint8_t i = 0; i < numKeys; i++) {
    trellis.setLED(i);
    trellis.writeDisplay();
    delay(50);
  }
  // then turn them off
  for (uint8_t i = 0; i < numKeys; i++) {
    trellis.clrLED(i);
    trellis.writeDisplay();
    delay(50);
  }

  beginEncoders();
}

int lastEncoders[4] = { 0, 0, 0, 0};

// ------------------------------------------------------------     land of funkts

void trellisDisplay()
{
  for (int f = 0; f < 32; f++)
  {
    if (buttVar[f] == 0)
    {
      trellis.clrLED(f);
    }

    if (buttVar[f] == 1 )
    {
      trellis.setLED(f);
    }
  }
  trellis.writeDisplay();
}

void alphaDisplay(int dialPos)    // function alphaDisplay(); uses shiftVar to display the correct values from the dialVar[] array
{
  int alphA = (dialPos * 4 + 0);
  int alphB = (dialPos * 4 + 1);
  int alphC = (dialPos * 4 + 2);
  int alphD = (dialPos * 4 + 3);


  // -------------------------put alphA in a switch statement to control bidirectional cutoff control with cc#08

  if ((dialVar[alphA] / 17 ) / 100 == 0 )
  {
    alpha4a.writeDigitAscii(0, 32);
    alpha4a.writeDigitAscii(1, (dialVar[alphA] / 17)   % 100 / 10 + 48);
    alpha4a.writeDigitAscii(2, (dialVar[alphA] / 17)   % 10 + 48);
  }
  else
  {
    alpha4a.writeDigitAscii(0, (dialVar[alphA] / 17)  / 100 + 48);
    alpha4a.writeDigitAscii(1, (dialVar[alphA] / 17)   % 100 / 10 + 48);
    alpha4a.writeDigitAscii(2, (dialVar[alphA] / 17)   % 10 + 48);
  }


  if ((dialVar[alphB] / 17 ) / 100 == 0 )
  {
    alpha4a.writeDigitAscii(3, 32);
    alpha4b.writeDigitAscii(0, (dialVar[alphB] / 17)   % 100 / 10 + 48);
    alpha4b.writeDigitAscii(1, (dialVar[alphB] / 17)   % 10 + 48);
  }
  else
  {
    alpha4a.writeDigitAscii(3, (dialVar[alphB] / 17)   / 100 + 48);
    alpha4b.writeDigitAscii(0, (dialVar[alphB] / 17)   % 100 / 10 + 48);
    alpha4b.writeDigitAscii(1, (dialVar[alphB] / 17)   % 10 + 48);
  }
  switch (alphC)
  {
    case 2 :
      if (dialVar[alphC] > 9)
      {
        alpha4b.writeDigitAscii(2, 32);
        alpha4b.writeDigitAscii(3, 49);
        alpha4c.writeDigitAscii(0, (dialVar[alphC])   % 10 + 48);
      }
      else  if (dialVar[alphC] < 10)
      {
        alpha4b.writeDigitAscii(2, 32);
        alpha4b.writeDigitAscii(3, 32);
        alpha4c.writeDigitAscii(0, (dialVar[alphC])   % 10 + 48);
      }
      break;
    case 6:
    case 10:
      if (dialVar[alphC] == 0)
      {
        alpha4b.writeDigitAscii(2, 72);
        alpha4b.writeDigitAscii(3, 80);
        alpha4c.writeDigitAscii(0, 70);
      }
      else if (dialVar[alphC] == 1)
      {
        alpha4b.writeDigitAscii(2, 76);
        alpha4b.writeDigitAscii(3, 80);
        alpha4c.writeDigitAscii(0, 70);
      }
      break;
    case 14 :
    case 18 :
    case 22 :
    case 26 :
    case 30 :
    case 34 :
      if (dialVar[alphC] == 0)
      {
        alpha4b.writeDigitAscii(2, 83);
        alpha4b.writeDigitAscii(3, 73);
        alpha4c.writeDigitAscii(0, 78);
      }
      else if (dialVar[alphC] == 1)
      {
        alpha4b.writeDigitAscii(2, 83);
        alpha4b.writeDigitAscii(3, 68);
        alpha4c.writeDigitAscii(0, 78);
      }
      else if (dialVar[alphC] == 2)
      {
        alpha4b.writeDigitAscii(2, 83);
        alpha4b.writeDigitAscii(3, 85);
        alpha4c.writeDigitAscii(0, 80);
      }
      else if (dialVar[alphC] == 3)
      {
        alpha4b.writeDigitAscii(2, 84);
        alpha4b.writeDigitAscii(3, 82);
        alpha4c.writeDigitAscii(0, 73);
      }
      break;
  }

  if (alphD > 14)
  {
    alpha4c.writeDigitAscii(1, 32);
    alpha4c.writeDigitAscii(2, 32);
    alpha4c.writeDigitAscii(3, 32);
  }
  else
  {
    if (alphD == 11)
    {
      if (dialVar[alphD] == 0)
      {
        alpha4c.writeDigitAscii(1, 79);
        alpha4c.writeDigitAscii(2, 70);
        alpha4c.writeDigitAscii(3, 70);
      }
      if (dialVar[alphD] == 1)
      {
        alpha4c.writeDigitAscii(1, 32);
        alpha4c.writeDigitAscii(2, 79);
        alpha4c.writeDigitAscii(3, 78);
      }

    }
    else
    {
      if ((dialVar[alphD] / 17 ) / 100 == 0 )
      {
        alpha4c.writeDigitAscii(1, 32);
        alpha4c.writeDigitAscii(2, (dialVar[alphD] / 17)   % 100 / 10 + 48);
        alpha4c.writeDigitAscii(3, (dialVar[alphD] / 17)   % 10 + 48);
      }
      else
      {
        alpha4c.writeDigitAscii(1, (dialVar[alphD] / 17)   / 100 + 48);
        alpha4c.writeDigitAscii(2, (dialVar[alphD] / 17)   % 100 / 10 + 48);
        alpha4c.writeDigitAscii(3, (dialVar[alphD] / 17)   % 10 + 48);
      }
    }
  }
  alpha4a.writeDisplay();
  alpha4b.writeDisplay();
  alpha4c.writeDisplay();
}

void noteOn(int num, int val)
{
  Serial3.write(0xB0); // midi chan (0xB0 - 0xcBF)
  Serial3.write(num);  // cc number (0x00 - 0x7F)
  Serial3.write(val);  // cc value  (0 - 127 or 16383 on hi rez)
}

void contOn(int num, int val)
{
  int splitValMSB = (val / 127);
  int splitValLSB = (val % 128);
  //------LSB
  Serial3.write(0xB0); // midi chan (0xB0 - 0xcBF)
  Serial3.write(num + 32);  // cc number (0x00 - 0x7F)
  Serial3.write(splitValLSB);  // cc value  (0 - 127 or 16383 on hi rez)
  //--------------MSBSerial3.write(0xB0); // midi chan (0xB0 - 0xcBF)
  Serial3.write(0xB0); // midi chan (0xB0 - 0xcBF)
  Serial3.write(num);  // cc number (0x00 - 0x7F)
  Serial3.write(splitValMSB);  // cc value  (0 - 127 or 16383 on hi rez)
}

////----------------set inital parameters
//                  // Page 1
//contOn(0, 16383); // in gain 
//contOn(1, 16383); // sample rate
//contOn(2, 15);    // bit depth
////contOn(3, 0);   // out gain (currently 0)               
//                  // Page 2
//contOn(4, 16383); // LPF freq full
////contOn(5, 0);   // Rez min
//contOn(6, 1);     // filter set to LPF
//contOn(7, 16383); // filters set to serial.

void loop()  // -----------------------------------------------------------------------------------------------------------void loop starts
{
  //  -----------------------------------------------------------------------trellis buttons
  delay(30); // 30ms delay is required, dont remove me!
  addressCounter = 0;

  presetMode = buttVar[31];

  if (MODE == LATCHING)
  {
    if (trellis.readSwitches()) //---------------- If a button was just pressed or released...
    {
      for (uint8_t i = 0; i < numKeys; i++) // ----go through every button
      {
        if (trellis.justPressed(i))  //----------- if it was pressed...
        {
          switch (i)
          {
            case 0 :    // all the bit flips
            case 1 :
            case 2 :
            case 3 :
            case 4 :
            case 5 :
            case 6 :
            case 7 :
            case 8 :
            case 9 :
            case 10 :
            case 11 :
            case 12 :
            case 13 :
            case 14 :
            case 16 :
            case 17 :
            case 18 :
            case 19 :
            case 20 :
            case 21 :
            case 22 :
            case 23 :
            case 24 :
            case 25 :
            case 26 :
            case 27 :

              if (buttVar[i] == 1)// ------------------//change buttVar[i] then send some midi
              {
                buttVar[i + trellisMod] --;
                if (buttVar[i + trellisMod] < 0)
                {
                  buttVar[i + trellisMod] = 0;
                }
                noteOn((i + 64), 0);
              }
              else
              {
                buttVar[i + trellisMod] ++;
                if (buttVar[i + trellisMod] > 1)
                {
                  buttVar[i + trellisMod] = 1;
                }
                noteOn((i + 64), 127);
              }
              break;

            //LFO resets
            case 15 :
            case 28 :
            case 29 :
            case 30 :
            case 31 :

              noteOn((i + 64), 127);

              break;
          }
        }
      }
      trellisDisplay();
    }
  }


  // -----------------------------------------controls LED flashing
  unsigned long currentFlashFour = millis();
  unsigned long currentFlashFive = millis();
  unsigned long currentFlashSix = millis();
  unsigned long currentFlashSeven = millis();

  // -----------------------------------defines variables for buttons
  int upButton = digitalRead(pushButtonUp);
  int dwnButton = digitalRead(pushButtonDwn);
  int shiftButton = digitalRead(pushButtonShift);

  // ----------------------REMOVE repeats from held buttons and only outputs on button press
  // ----------------------------------control increment from Up Button
  if (upButton == 1)
  {
    if (upButton != lastUpButtonState)
    {
      varState ++;
    }
  }
  lastUpButtonState = upButton;

  // -----------------------------------control decrement with Down Button
  if (dwnButton == 1)
  {
    if (dwnButton != lastDwnButtonState)
    {
      varState --;
    }
  }
  lastDwnButtonState = dwnButton;

  // -------control shift param

  if (shiftButton == 1)
  {
    if (shiftButton != lastShiftButtonState)
    {
      shiftVar ++;
    }
  }
  lastShiftButtonState = shiftButton;

  if (shiftVar == 2)
  {
    shiftVar = 0;
  }

  //----------------------------controls the rollover for buttons (0 - 15)
  if (varState == 8)
  {
    varState = 0;
  }
  if (varState == -1)
  {
    varState = 7;
  }

  trellisMod = 0;

  if (varState == 0)
  {
    digitalWrite(31, LOW);
    digitalWrite(33, HIGH);
    digitalWrite(35, HIGH);
    digitalWrite(37, HIGH);
    alphaDisplay(varState);
  }
  else if (varState == 1)
  {
    digitalWrite(31, HIGH);
    digitalWrite(33, LOW);
    digitalWrite(35, HIGH);
    digitalWrite(37, HIGH);
    alphaDisplay(varState);
  }
  else if (varState == 2)
  {
    digitalWrite(31, HIGH);
    digitalWrite(33, HIGH);
    digitalWrite(35, LOW);
    digitalWrite(37, HIGH);
    alphaDisplay(varState);
  }
  else if (varState == 3)
  {
    digitalWrite(31, HIGH);
    digitalWrite(33, HIGH);
    digitalWrite(35, HIGH);
    digitalWrite(37, LOW);
    alphaDisplay(varState);
  }
  else if (varState == 4)
  {
    digitalWrite(33, HIGH);
    digitalWrite(35, HIGH);
    digitalWrite(37, HIGH);
    if (currentFlashFour - lastFlashFour >= flashRate)
    {
      lastFlashFour = currentFlashFour;
      if (flashStateFour == LOW)
      {
        flashStateFour = HIGH;
      }
      else
      {
        flashStateFour = LOW;
      }
      digitalWrite(31, flashStateFour);
    }
    alphaDisplay(varState);
  }
  else if (varState == 5)
  {
    digitalWrite(31, HIGH);
    digitalWrite(35, HIGH);
    digitalWrite(37, HIGH);
    if (currentFlashFive - lastFlashFive >= flashRate)
    {
      lastFlashFive = currentFlashFive;
      if (flashStateFive == LOW)
      {
        flashStateFive = HIGH;
      }
      else
      {
        flashStateFive = LOW;
      }
      digitalWrite(33, flashStateFive);
    }
    alphaDisplay(varState);
  }
  else if (varState == 6)
  {
    digitalWrite(31, HIGH);
    digitalWrite(33, HIGH);
    digitalWrite(37, HIGH);
    if (currentFlashSix - lastFlashSix >= flashRate)
    {
      lastFlashSix = currentFlashSix;
      if (flashStateSix == LOW)
      {
        flashStateSix = HIGH;
      }
      else
      {
        flashStateSix = LOW;
      }
      digitalWrite(35, flashStateSix);
    }
    alphaDisplay(varState);
  }
  else if (varState == 7)
  {
    digitalWrite(31, HIGH);
    digitalWrite(33, HIGH);
    digitalWrite(35, HIGH);
    if (currentFlashSeven - lastFlashSeven >= flashRate)
    {
      lastFlashSeven = currentFlashSeven;
      if (flashStateSeven == LOW)
      {
        flashStateSeven = HIGH;
      }
      else
      {
        flashStateSeven = LOW;
      }
      digitalWrite(37, flashStateSeven);
    }
    alphaDisplay(varState);
  }

  //---------------------------------------------------------encoder bit
  dialA = (varState * 4 + 0);
  dialB = (varState * 4 + 1);
  dialC = (varState * 4 + 2);
  dialD = (varState * 4 + 3);
  int dialChange;
  if (shiftVar == 0)
  {
    dialChange = 683;
  }
  if (shiftVar == 1 )
  {
    dialChange = 33;
  }


  if (updateEncoders())
  {
    for (int i = 0; i < 4; i++)
    {
      if (encoder[i].count != lastEncoders[i])
      {
        // -----------------------------------------------------------------add shift handling of dial rate here
        //     ------------------------------------     turn anti clockwise
        if (encoder[i].count < lastEncoders[i])
        {
          if (i == 0)
          {
            dialVar[dialA] -= dialChange;
            if (dialVar[dialA] < 0)
            {
              dialVar[dialA] = 0;
            }
            contOn(dialA, dialVar[dialA]);
          }
          else if (i == 1)
          {
            dialVar[dialB] -= dialChange;
            if (dialVar[dialB] < 0)
            {
              dialVar[dialB] = 0;
            }
            contOn(dialB, dialVar[dialB]);
          }
          else if (i == 2)
          {
            dialVar[dialC] -= 1;
            if (dialVar[dialC] < 0)
            {
              dialVar[dialC] = 0;
            }
            noteOn(dialC, dialVar[dialC]);
          }
          else
          {
            if (dialD == 11)
            {
              dialVar[dialD] -= 1;
              if (dialVar[dialD] < 0)
              {
                dialVar[dialD] = 0;
              }
              noteOn(dialD, dialVar[dialD]);
            }
            else
            {
              dialVar[dialD] -= dialChange;
              if (dialVar[dialD] < 0)
              {
                dialVar[dialD] = 0;
              }
              contOn(dialD, dialVar[dialD]);
            }
          }
          encoder[i].count = lastEncoders[i]; // resets dial for next increment
        }
        //     ------------------------------------ turn clockwise

        if (encoder[i].count > lastEncoders[i])
        {
          if (i == 0)
          {


            dialVar[dialA] += dialChange;
            if (dialVar[dialA] > 16383)
            {
              dialVar[dialA] = 16383;
            }
            contOn(dialA, dialVar[dialA]);
          }
          else if (i == 1)
          {
            dialVar[dialB] += dialChange;
            if (dialVar[dialB] > 16383)
            {
              dialVar[dialB] = 16383;
            }
            contOn(dialB, dialVar[dialB]);
          }
          else if (i == 2)
          {
            dialVar[dialC] += 1;
            if (dialC == 2)
            {
              if (dialVar[dialC] > 16)
              {
                dialVar[dialC] = 16;
              }
              noteOn(dialC, dialVar[dialC]);
            }
            else if (dialC == 6)
            {
              if (dialVar[dialC] > 1)
              {
                dialVar[dialC] = 1;
              }
              noteOn(dialC, dialVar[dialC]);
            }
            else if (dialC == 10)
            {

              if (dialVar[dialC] > 1)
              {
                dialVar[dialC] = 1;
              }
              noteOn(dialC, dialVar[dialC]);
            }
            else if (dialC == 14)
            {
              if (dialVar[dialC] > 3)
              {
                dialVar[dialC] = 3;
              }
              noteOn(dialC, dialVar[dialC]);
            }
            else if (dialC == 18)
            {

              if (dialVar[dialC] > 3)
              {
                dialVar[dialC] = 3;
              }
              noteOn(dialC, dialVar[dialC]);
            }
            else if (dialC == 22)
            {
              if (dialVar[dialC] > 3)
              {
                dialVar[dialC] = 3;
              }
              noteOn(dialC, dialVar[dialC]);
            }
            else if (dialC == 30)
            {
              if (dialVar[dialC] > 3)
              {
                dialVar[dialC] = 3;
              }
              noteOn(dialC, dialVar[dialC]);
            }
            else if (dialC == 34)
            {
              if (dialVar[dialC] > 3)
              {
                dialVar[dialC] = 3;
              }
              noteOn(dialC, dialVar[dialC]);
            }
          }
          else
          {
            if (dialD == 11)
            {
              dialVar[dialD] += 1;
              if (dialVar[dialD] > 1)
              {
                dialVar[dialD] = 1;
              }
              noteOn(dialD, dialVar[dialD]);
            }
            else
            {
              dialVar[dialD] += dialChange;
              if (dialVar[dialD] > 16256)
              {
                dialVar[dialD] = 16256;
              }
              contOn(dialD, dialVar[dialD]);
            }
          }
          encoder[i].count = lastEncoders[i]; // resets dial for next increment
        }
        lastTurn = thisTurn;
        alphaDisplay(varState);
      }
    }
  }
}
